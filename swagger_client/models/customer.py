# coding: utf-8

"""
    Tortoise Merchant API

    Tortoise API for merchant to integrate with their existing systems   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: developer@tortoise.pro
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Customer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'email': 'str',
        'mobile': 'str',
        'country_code': 'str',
        'age': 'int',
        'gender': 'str',
        'kyc_status': 'str'
    }

    attribute_map = {
        'id': 'id',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'email': 'email',
        'mobile': 'mobile',
        'country_code': 'countryCode',
        'age': 'age',
        'gender': 'gender',
        'kyc_status': 'kycStatus'
    }

    def __init__(self, id=None, first_name=None, last_name=None, email=None, mobile=None, country_code=None, age=None, gender=None, kyc_status=None):  # noqa: E501
        """Customer - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._first_name = None
        self._last_name = None
        self._email = None
        self._mobile = None
        self._country_code = None
        self._age = None
        self._gender = None
        self._kyc_status = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if email is not None:
            self.email = email
        if mobile is not None:
            self.mobile = mobile
        if country_code is not None:
            self.country_code = country_code
        if age is not None:
            self.age = age
        if gender is not None:
            self.gender = gender
        if kyc_status is not None:
            self.kyc_status = kyc_status

    @property
    def id(self):
        """Gets the id of this Customer.  # noqa: E501

        Unique identifier for the customer  # noqa: E501

        :return: The id of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Customer.

        Unique identifier for the customer  # noqa: E501

        :param id: The id of this Customer.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def first_name(self):
        """Gets the first_name of this Customer.  # noqa: E501

        Customer's first name. For example, Surya Harsha  # noqa: E501

        :return: The first_name of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Customer.

        Customer's first name. For example, Surya Harsha  # noqa: E501

        :param first_name: The first_name of this Customer.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this Customer.  # noqa: E501

        Customer's last name. For example, Singh  # noqa: E501

        :return: The last_name of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Customer.

        Customer's last name. For example, Singh  # noqa: E501

        :param last_name: The last_name of this Customer.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def email(self):
        """Gets the email of this Customer.  # noqa: E501


        :return: The email of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Customer.


        :param email: The email of this Customer.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def mobile(self):
        """Gets the mobile of this Customer.  # noqa: E501


        :return: The mobile of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._mobile

    @mobile.setter
    def mobile(self, mobile):
        """Sets the mobile of this Customer.


        :param mobile: The mobile of this Customer.  # noqa: E501
        :type: str
        """

        self._mobile = mobile

    @property
    def country_code(self):
        """Gets the country_code of this Customer.  # noqa: E501


        :return: The country_code of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Customer.


        :param country_code: The country_code of this Customer.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def age(self):
        """Gets the age of this Customer.  # noqa: E501


        :return: The age of this Customer.  # noqa: E501
        :rtype: int
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this Customer.


        :param age: The age of this Customer.  # noqa: E501
        :type: int
        """

        self._age = age

    @property
    def gender(self):
        """Gets the gender of this Customer.  # noqa: E501


        :return: The gender of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this Customer.


        :param gender: The gender of this Customer.  # noqa: E501
        :type: str
        """
        allowed_values = ["male", "female", "other"]  # noqa: E501
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"  # noqa: E501
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def kyc_status(self):
        """Gets the kyc_status of this Customer.  # noqa: E501


        :return: The kyc_status of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._kyc_status

    @kyc_status.setter
    def kyc_status(self, kyc_status):
        """Sets the kyc_status of this Customer.


        :param kyc_status: The kyc_status of this Customer.  # noqa: E501
        :type: str
        """
        allowed_values = ["pending", "inProcess", "verified", "failed"]  # noqa: E501
        if kyc_status not in allowed_values:
            raise ValueError(
                "Invalid value for `kyc_status` ({0}), must be one of {1}"  # noqa: E501
                .format(kyc_status, allowed_values)
            )

        self._kyc_status = kyc_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Customer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Customer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
